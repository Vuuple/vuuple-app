# The following environment variables are substituted if present
# * QUORUM_CONSENSUS: default to istanbul
# * QUORUM_DOCKER_IMAGE: default to quorumengineering/quorum:2.2.3
# * QUORUM_TX_MANAGER_DOCKER_IMAGE: default to quorumengineering/tessera:0.8
# * QUORUM_GETH_ARGS: extra geth arguments to be included when running geth
# To use Constellation, set QUORUM_TX_MANAGER_DOCKER_IMAGE to Constellation docker image,
# e.g.: QUORUM_TX_MANAGER_DOCKER_IMAGE=quorumengineering/constellation:0.3.2 docker-compose up -d
# To use Remix, set QUORUM_GETH_ARGS="--rpccorsdomain https://remix.ethereum.org"
version: '3.6'
x-quorum-def: &quorum-def
  restart: 'on-failure'
  image: '${QUORUM_DOCKER_IMAGE:-quorumengineering/quorum:2.2.3}'
  expose:
    - '21000'
    - '50400'
  healthcheck:
    test: ['CMD', 'wget', '--spider', '--proxy', 'off', 'http://localhost:8545']
    interval: 3s
    timeout: 3s
    retries: 10
    start_period: 5s
  labels:
    com.quorum.consensus: ${QUORUM_CONSENSUS:-istanbul}
  entrypoint:
    - /bin/sh
    - -c
    - |
      UDS_WAIT=10
      DDIR=/qdata/dd
      rm -rf $${DDIR}
      mkdir -p $${DDIR}/keystore
      mkdir -p $${DDIR}/geth
      cp /examples/raft/nodekey $${DDIR}/geth/nodekey
      cp /examples/raft/pubkeyhash $${DDIR}/geth/pubkeyhash
      cp /examples/keys/key $${DDIR}/keystore/
      cat /examples/permissioned-nodes.json  > $${DDIR}/static-nodes.json
      echo adding local node to static-nodes.json
      #this is a bit convoluted but all it does is to add the node8 to the static-nodes.json
      #remove the last ']<EOL>' characters in the file static-nodes.json
      head -c -2   $${DDIR}/static-nodes.json > $${DDIR}/static-nodes-cut.json
      #build the enodeid for the newly created node - it is used in both static-nodes.json as well as with raft_addPeer further down
      printf %s "\"enode://" >> $${DDIR}/enodeid
      cat $${DDIR}/geth/pubkeyhash >> $${DDIR}/enodeid
      #removing the EoL that the cat adds
      head -c -1 $${DDIR}/enodeid > $${DDIR}/enodeid-cut
      echo "@0.0.0.0:21000?discport=0&raftport=50400\"" >> $${DDIR}/enodeid-cut
      cp $${DDIR}/enodeid-cut $${DDIR}/enodeid
      rm $${DDIR}/enodeid-cut
      echo ", " >> $${DDIR}/static-nodes-cut.json
      cat $${DDIR}/enodeid >> $${DDIR}/static-nodes-cut.json
      echo "]" >> $${DDIR}/static-nodes-cut.json
      cp $${DDIR}/static-nodes-cut.json $${DDIR}/static-nodes.json
      rm $${DDIR}/static-nodes-cut*
      cp $${DDIR}/static-nodes.json $${DDIR}/permissioned-nodes.json
      cat $${DDIR}/static-nodes.json
      if [ "${QUORUM_CONSENSUS:-istanbul}" == "raft" ]; then
        GENESIS_FILE="/examples/genesis.json"
      fi
      NETWORK_ID=$$(cat $${GENESIS_FILE} | grep chainId | awk -F " " '{print $$2}' | awk -F "," '{print $$1}')
      GETH_ARGS_raft="--raft --raftport 50400"
      GETH_ARGS_istanbul="--emitcheckpoints --istanbul.blockperiod 1 --mine --minerthreads 1 --syncmode full"
      geth --datadir $${DDIR} init $${GENESIS_FILE}
      geth \
        --identity node$${NODE_ID}-${QUORUM_CONSENSUS:-istanbul} \
        --datadir $${DDIR} \
        --nodiscover \
        --verbosity 5 \
        --networkid $${NETWORK_ID} \
        --rpc \
        --rpcaddr 0.0.0.0 \
        --rpcport 8545 \
        --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,${QUORUM_CONSENSUS:-istanbul} \
        --port 21000 \
        --unlock 0 \
        --password /examples/passwords.txt \
        ${QUORUM_GETH_ARGS:-} $${GETH_ARGS_${QUORUM_CONSENSUS:-istanbul}}
x-swarm-def: &swarm-def
  restart: 'on-failure'
  image: '${SWARM_DOCKER_IMAGE:-herawy/swarm-base}'
  expose:
    - '5001'
  entrypoint:
    - /bin/sh
    - -c
    - |
      DDIR=/qdata/dd
      NETWORK_ID=$$(cat $${GENESIS_FILE} | grep chainId | awk -F " " '{print $$2}' | awk -F "," '{print $$1}')
      echo "**************************"
      echo $${ADDRESS}
      echo "**************************"
      echo $${DDIR}
      echo $${PWD}
      echo $${NETWORK_ID}
      swarm  --datadir $${DDIR} --bzzaccount $${ADDRESS} --ens-api $${DDIR}/geth.ipc --bzzport 5001 --password /examples/passwords.txt --bzznetworkid 10  --port $${PORT}
x-tx-manager-def: &tx-manager-def
  image: '${QUORUM_TX_MANAGER_DOCKER_IMAGE:-quorumengineering/tessera:0.8}'
  expose:
    - '9000'
    - '9080'
  restart: 'no'
  healthcheck:
    test: ['CMD-SHELL', '[ -S /qdata/tm/tm.ipc ] || exit 1']
    interval: 3s
    timeout: 3s
    retries: 20
    start_period: 5s
  entrypoint:
    - /bin/sh
    - -c
    - |
      DDIR=/qdata/tm
      rm -rf $${DDIR}
      mkdir -p $${DDIR}
      DOCKER_IMAGE="${QUORUM_TX_MANAGER_DOCKER_IMAGE:-quorumengineering/tessera:0.8}"
      TX_MANAGER=$$(echo $${DOCKER_IMAGE} | sed 's/^.*\/\(.*\):.*$$/\1/g')
      echo "TxManager: $${TX_MANAGER}"
      case $${TX_MANAGER}
      in
        tessera)
          cp /examples/keys/tm.pub $${DDIR}/tm.pub
          cp /examples/keys/tm.key $${DDIR}/tm.key
          #extract the tessera version from the jar
          TESSERA_VERSION=$$(unzip -p /tessera/tessera-app.jar META-INF/MANIFEST.MF | grep Tessera-Version | cut -d" " -f2)
          echo "Tessera version (extracted from manifest file): $${TESSERA_VERSION}"
          # sorting versions to target correct configuration
          V08=$$(echo -e "0.8\n$${TESSERA_VERSION}" | sort -n -r -t '.' -k 1,1 -k 2,2 | head -n1)
          V09=$$(echo -e "0.9\n$${TESSERA_VERSION}" | sort -n -r -t '.' -k 1,1 -k 2,2 | head -n1)
          TESSERA_CONFIG_TYPE=
          case "$${TESSERA_VERSION}" in
              "$${V09}")
                  TESSERA_CONFIG_TYPE="-09"
                  ;;
              "$${V08}")
                  TESSERA_CONFIG_TYPE="-enhanced"
                  ;;
          esac

          echo Config type $${TESSERA_CONFIG_TYPE}

          #generating the two config flavors
          cat <<EOF > $${DDIR}/tessera-config.json
          {
              "useWhiteList": false,
              "jdbc": {
                  "username": "sa",
                  "password": "",
                  "url": "jdbc:h2:./$${DDIR}/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
                  "autoCreateTables": true
              },
              "server": {
                  "port": 9000,
                  "hostName": "http://0.0.0.0",
                  "sslConfig": {
                      "tls": "OFF",
                      "generateKeyStoreIfNotExisted": true,
                      "serverKeyStore": "$${DDIR}/server-keystore",
                      "serverKeyStorePassword": "quorum",
                      "serverTrustStore": "$${DDIR}/server-truststore",
                      "serverTrustStorePassword": "quorum",
                      "serverTrustMode": "TOFU",
                      "knownClientsFile": "$${DDIR}/knownClients",
                      "clientKeyStore": "$${DDIR}/client-keystore",
                      "clientKeyStorePassword": "quorum",
                      "clientTrustStore": "$${DDIR}/client-truststore",
                      "clientTrustStorePassword": "quorum",
                      "clientTrustMode": "TOFU",
                      "knownServersFile": "$${DDIR}/knownServers"
                  }
              },
              "peer": [
                  {
                      "url": "http://3.14.2.131:9000"
                  },
                  {
                      "url": "http://3.18.34.201:9000"
                  },
                  {
                      "url": "http://3.18.204.171:9000"
                  },
                  {
                      "url": "http://3.19.116.28:9000"
                  }
              ],
              "keys": {
                  "passwords": [],
                  "keyData": [
                      {
                          "config": $$(cat $${DDIR}/tm.key),
                          "publicKey": "$$(cat $${DDIR}/tm.pub)"
                      }
                  ]
              },
              "alwaysSendTo": [],
              "unixSocketFile": "$${DDIR}/tm.ipc"
          }
      EOF

          cat <<EOF > $${DDIR}/tessera-config-enhanced.json
          {
            "useWhiteList": false,
            "jdbc": {
              "username": "sa",
              "password": "",
              "url": "jdbc:h2:./$${DDIR}/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
              "autoCreateTables": true
            },
            "serverConfigs":[
            {
              "app":"ThirdParty",
              "enabled": true,
              "serverSocket":{
                "type":"INET",
                "port": 9080,
                "hostName": "http://0.0.0.0"
              },
              "communicationType" : "REST"
            },
            {
              "app":"Q2T",
              "enabled": true,
              "serverSocket":{
                "type":"UNIX",
                "path":"$${DDIR}/tm.ipc"
              },
              "communicationType" : "UNIX_SOCKET"
            },
            {
              "app":"P2P",
              "enabled": true,
              "serverSocket":{
                "type":"INET",
                "port": 9000,
                "hostName": "http://0.0.0.0"
              },
              "sslConfig": {
                "tls": "OFF",
                "generateKeyStoreIfNotExisted": true,
                "serverKeyStore": "$${DDIR}/server-keystore",
                "serverKeyStorePassword": "quorum",
                "serverTrustStore": "$${DDIR}/server-truststore",
                "serverTrustStorePassword": "quorum",
                "serverTrustMode": "TOFU",
                "knownClientsFile": "$${DDIR}/knownClients",
                "clientKeyStore": "$${DDIR}/client-keystore",
                "clientKeyStorePassword": "quorum",
                "clientTrustStore": "$${DDIR}/client-truststore",
                "clientTrustStorePassword": "quorum",
                "clientTrustMode": "TOFU",
                "knownServersFile": "$${DDIR}/knownServers"
              },
              "communicationType" : "REST"
            }
            ],
              "peer": [
                  {
                      "url": "http://3.14.2.131:9000"
                  },
                  {
                      "url": "http://3.18.34.201:9000"
                  },
                  {
                      "url": "http://3.18.204.171:9000"
                  },
                  {
                      "url": "http://3.19.116.28:9000"
                  }
              ],
            "keys": {
              "passwords": [],
              "keyData": [
                {
                  "config": $$(cat $${DDIR}/tm.key),
                  "publicKey": "$$(cat $${DDIR}/tm.pub)"
                }
              ]
            },
            "alwaysSendTo": []
          }
      EOF

          cat <<EOF > $${DDIR}/tessera-config-09.json
          {
            "useWhiteList": false,
            "jdbc": {
              "username": "sa",
              "password": "",
              "url": "jdbc:h2:./$${DDIR}/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
              "autoCreateTables": true
            },
            "serverConfigs":[
            {
              "app":"ThirdParty",
              "enabled": true,
              "serverAddress": "http://0.0.0.0:9080",
              "communicationType" : "REST"
            },
            {
              "app":"Q2T",
              "enabled": true,
              "serverAddress": "unix:$${DDIR}/tm.ipc",
              "communicationType" : "REST"
            },
            {
              "app":"P2P",
              "enabled": true,
              "serverAddress": "http://0.0.0.0:9000",
              "sslConfig": {
                "tls": "OFF",
                "generateKeyStoreIfNotExisted": true,
                "serverKeyStore": "$${DDIR}/server-keystore",
                "serverKeyStorePassword": "quorum",
                "serverTrustStore": "$${DDIR}/server-truststore",
                "serverTrustStorePassword": "quorum",
                "serverTrustMode": "TOFU",
                "knownClientsFile": "$${DDIR}/knownClients",
                "clientKeyStore": "$${DDIR}/client-keystore",
                "clientKeyStorePassword": "quorum",
                "clientTrustStore": "$${DDIR}/client-truststore",
                "clientTrustStorePassword": "quorum",
                "clientTrustMode": "TOFU",
                "knownServersFile": "$${DDIR}/knownServers"
              },
              "communicationType" : "REST"
            }
            ],
              "peer": [
                  {
                      "url": "http://3.14.2.131:9000"
                  },
                  {
                      "url": "http://3.18.34.201:9000"
                  },
                  {
                      "url": "http://3.18.204.171:9000"
                  },
                  {
                      "url": "http://3.19.116.28:9000"
                  }
              ],
            "keys": {
              "passwords": [],
              "keyData": [
                {
                  "config": $$(cat $${DDIR}/tm.key),
                  "publicKey": "$$(cat $${DDIR}/tm.pub)"
                }
              ]
            },
            "alwaysSendTo": []
          }
      EOF
          cat $${DDIR}/tessera-config$${TESSERA_CONFIG_TYPE}.json
          java -Xms128M -Xmx128M -jar /tessera/tessera-app.jar -configfile $${DDIR}/tessera-config$${TESSERA_CONFIG_TYPE}.json
          ;;

        *)
          echo "Invalid Transaction Manager"
          exit 1
          ;;
      esac
services:
  swarm8:
    <<: *swarm-def
    hostname: swarm8
    container_name: swarm-node
    ports:
      - '23007:5001'
    volumes:
      - ~/.network/node:/qdata:rw
      - ./examples/7nodes:/examples:ro
    depends_on:
      - node
    environment:
      - ADDRESS=0xed9d02e382b34818e88b88a309c7fe71e65f419d
      - PORT=900
      - PassWord="/examples/passwords.txt"
    networks:
      quorum-examples-net:
  node:
    <<: *quorum-def
    hostname: node
    container_name: quorum-node
    ports:
      - '22000:8545'
      - '21000:21000'
      - '50400:50400'
      - '30301:30301'
    volumes:
      - ~/.network/node:/qdata:rw
      - ./examples/7nodes:/examples:ro
    depends_on:
      - txmanager
    environment:
      - PRIVATE_CONFIG=/qdata/tm/tm.ipc
      - QUORUM_CONSENSUS=raft
      - NODE_ID=1
    networks:
      quorum-examples-net:
        ipv4_address: 172.16.239.18
  txmanager:
    <<: *tx-manager-def
    container_name: txManger-node
    ports:
      - '9000:9000'
    volumes:
      - ~/.network/node:/qdata:rw
      - ./examples/7nodes:/examples:ro
    networks:
      quorum-examples-net:
    environment:
      - NODE_ID=1
networks:
  quorum-examples-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.239.0/24
